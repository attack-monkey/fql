{"version":3,"sources":["fns/is-fql.ts","fns/single-fql.ts","fns/fqlify.ts","fns/aux/chain.ts","index.ts"],"names":[],"mappings":";AAAa,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,QAAA,YAAA,EAAA,QAAA,MAAQ,SAAC,GAAW,MAAiB,WAAjB,EAAO,IAA4D,OAAtC,OAAO,KAAK,GAAO,GAAG,MAAM,EAAG;;ACAhF,aAAA,QAAA,YAAA,EAAA,QAAA,UAAY,SAAC,EAAM,EAAS,EAAO,GACxC,IAAA,EAAwB,SAAT,EAAkB,EAAW,EAAgB,KAC5D,EAA0B,SAAT,EACnB,OAAO,OAAO,GAAI,EAAc,CAAE,IAAG,IACjC,EAAY,OAAA,CAAE,IAEhB,IAAC,EAAa,MAAA,IAAI,MAAM,uCACxB,IAAC,EAAI,IAAoB,OAAV,EAAwB,MAAA,IAAI,MAC7C,qFAEE,IAAC,EAAI,IAAoB,OAAV,EAAwB,MAAA,IAAI,MAC7C,QAAQ,EAAK,mFAER,OAAA,EAAI,GAAO,GAAM,KAAM;;ACXrB,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,QAAA,YAAA,EAFb,IAAA,EAAA,QAAA,gBAEa,QAAA,OAAS,SAAC,EAAK,GACpB,IAAA,EAAQ,OAAO,KAAK,GAAO,GAAG,QAAQ,KAAM,IAC5C,EAAU,OAAO,OAAO,GAAO,GAE/B,EAA0B,WAAnB,EAAO,IACa,SAA5B,OAAO,KAAK,GAAS,GACpB,QACA,OAKC,MAH0B,WAAnB,EAAO,IACY,UAA5B,OAAO,KAAK,GAAS,GAGpB,EAAgB,MAAgB,OAAO,SAAC,EAAI,GAbvC,IAAA,EAeA,OADK,QAAA,OAAO,CAAC,GAAE,KAAC,EAAA,IAAG,KAAU,EAAE,KAErC,EAAI,IACL,EAAA,UAAU,EAAM,EAAS,EAAO;;ACjBzB,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,QAAA,YAAA,EAFb,IAAA,EAAA,QAAA,eAEa,QAAA,MAAQ,SAAC,GAAE,IAAA,EAAA,EAAA,MAAO,EAAA,EAAA,IAEtB,OADG,EAAM,MAAM,GACb,OACP,SAAC,EAAI,GACG,IAAA,EAAgC,WAAd,EAAO,GAAkB,UAAY,SACvD,EAAuC,YAApB,EACrB,OAAO,KAAK,GAAI,GAChB,EACE,EAAmC,YAApB,EACjB,SACqB,WAApB,GACsB,mBAAX,EAAG,GACT,SACA,OACJ,EAAkC,YAApB,GACE,WAAjB,GACA,EAAG,GAAkB,KACpB,QACoB,YAApB,GACoB,WAAjB,EACD,YACA,EACF,EAAuB,UAAhB,EACT,EAAG,GAAkB,KACL,SAAhB,EACE,EAAG,QACH,EACC,MAAoB,WAApB,GAAiD,SAAjB,EACnC,EAAG,GACiB,WAApB,GAAgD,WAAhB,EAC9B,EAAG,KACiB,YAApB,GAAiD,UAAhB,EAC/B,EAAG,GAAiB,MAApB,EAAwB,GACJ,YAApB,GAAiD,SAAhB,EAC/B,EAAG,GAAkB,QACrB,GAGV,EAAA,IAAI,EAAK,EAAM;;ACzBR,aAAA,QAAA,YAAA,EAfb,IAAA,EAAA,QAAA,gBACA,EAAA,QAAA,gBACA,EAAA,QAAA,mBAEa,QAAA,IAAM,SAAC,EAAK,GACnB,IACK,OAAA,EAAA,MAAM,GACT,EAAA,OAAO,EAAK,GACZ,EACJ,MAAM,GACN,QAAQ,IAAI,wBACZ,QAAQ,MAAM,KAIL,QAAA,MAAQ,EAAA","file":"index.js","sourceRoot":"../src","sourcesContent":["export const isFql = (input) => (typeof input === 'object' && Object.keys(input)[0].slice(0, 2) === '__')","export const singleFql = (call, fnInput, fnKey, fns) => {\n  const fnInputStep2 = call === 'call' ? fnInput : (fnInput as any).args\n  const fnInputWithFns = call === 'call'\n    ? Object.assign({}, fnInputStep2, { fns })\n    : [...fnInputStep2, fns]\n    \n    if (!fns) { throw new Error('No \\'fns\\' argument has been provided') }\n    if (!fns[fnKey] && fnKey === 'ac') { throw new Error(\n      `There is a function in your query that has not been passed to the fql interpreter`\n    ) }\n    if (!fns[fnKey] && fnKey !== 'ac') { throw new Error(\n      `The '${fnKey}' function exists in your query, but has not been passed to the fql interpreter`\n    ) }\n    return fns[fnKey][call](null, fnInputWithFns)\n}","import { singleFql } from './single-fql';\n\nexport const fqlify = (fns, query) => {\n  const fnKey = Object.keys(query)[0].replace('__', '')\n  const fnInput = Object.values(query)[0]\n  // use call or apply\n  const call = typeof fnInput === 'object' \n    && Object.keys(fnInput)[0] === 'args'\n      ? 'apply'\n      : 'call'\n  \n  const curry = typeof fnInput === 'object' \n    && Object.keys(fnInput)[0] === 'curry'\n\n  return curry\n    ? ((fnInput as any).curry as any[]).reduce((ac, cv) => {\n      const res = fqlify({ac}, {['__ac']: cv})\n      return res\n    }, fns[fnKey])\n    : singleFql(call, fnInput, fnKey, fns)\n}","import { fql } from '../../index';\n\nexport const chain = ({ chain, fns }) => {\n  const b = chain.slice(1)\n  return b.reduce(\n    (ac, cv) => {\n      const complexOrSimple = typeof cv === 'object' ? 'complex' : 'simple'\n      const methodOrPropName = complexOrSimple === 'complex'\n        ? Object.keys(cv)[0]\n        : cv\n      const methodOrProp = complexOrSimple === 'complex'\n        ? 'method'\n        :  complexOrSimple === 'simple'\n            && typeof ac[cv] === 'function'\n              ? 'method' \n              : 'prop'\n      const applyOrCall = complexOrSimple === 'complex'\n        && methodOrProp === 'method'\n        && cv[methodOrPropName].args\n          ? 'apply'\n          : complexOrSimple === 'complex'\n            && methodOrProp === 'method'\n            ? 'call'\n            : undefined\n      const args = applyOrCall === 'apply'\n        ? cv[methodOrPropName].args\n        : applyOrCall === 'call'\n          ? cv[methodOrPropName]\n          : undefined\n      return complexOrSimple === 'simple' && methodOrProp === 'prop'\n        ? ac[cv]\n        : complexOrSimple === 'simple' && methodOrProp ==='method'\n          ? ac[cv]()\n          : complexOrSimple === 'complex' && applyOrCall === 'apply'\n            ? ac[methodOrPropName](...args)\n            : complexOrSimple === 'complex' && applyOrCall === 'call'\n              ? ac[methodOrPropName](args)\n              : undefined\n\n    }\n    , fql(fns, chain[0])\n  )\n}\n","import { isFql } from './fns/is-fql'\nimport { fqlify } from './fns/fqlify'\nimport { chain as chainMethod } from './fns/aux/chain'\n\nexport const fql = (fns, query) => {\n  try {\n    return isFql(query)\n      ? fqlify(fns, query)\n      : query\n  } catch(e) {\n    console.log('Error in fql mapping')\n    console.error(e)\n  }\n}\n\nexport const chain = chainMethod;"]}